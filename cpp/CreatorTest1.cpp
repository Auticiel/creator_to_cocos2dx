////// AUTOGENERATED:BEGIN //////
////// DO     NOT     EDIT //////

#include <ui/CocosGUI.h>
#include "creator_utils.h"

    USING_NS_CC;

    bool CreatorTest1_init()
    {
        auto director = Director::getInstance();
        auto glview = director->getOpenGLView();
        auto frameSize = glview->getFrameSize();
        glview->setDesignResolutionSize(frameSize.width / (frameSize.height / 640), frameSize.height / (frameSize.height / 640), ResolutionPolicy::NO_BORDER);
    
    // BEGIN SpriteFrame loading
    auto spriteFrameCache = SpriteFrameCache::getInstance();
    // Files from .plist
    // creator_assets/test_polygon.plist processed manually. No need to include it in the assets folder
    // creator_assets/ui.plist processed manually. No need to include it in the assets folder

    // Files from .png
    auto sf_ghosts = SpriteFrame::create("creator_assets/ghosts.png", Rect(1, 0, 196, 130), false, Vec2(-29, 63), Size(256, 256));
    spriteFrameCache->addSpriteFrame(sf_ghosts, "ghosts");
    auto sf_grossinis_sister2_png = SpriteFrame::create("creator_assets/test_polygon.png", Rect(279, 26, 55, 130), false, Vec2(0, -2), Size(56, 138));
    sf_grossinis_sister2_png->setCenterRectInPixels(Rect(17,62,21,32));
    spriteFrameCache->addSpriteFrame(sf_grossinis_sister2_png, "grossinis_sister2.png");
    auto sf_arial16 = SpriteFrame::create("creator_assets/arial16.png", Rect(0, 0, 510, 61), false, Vec2(-1, 225.5), Size(512, 512));
    spriteFrameCache->addSpriteFrame(sf_arial16, "arial16");
    auto sf_default_sprite = SpriteFrame::create("creator_assets/image/default_sprite.png", Rect(0, 2, 40, 36), false, Vec2(0, 0), Size(40, 40));
    spriteFrameCache->addSpriteFrame(sf_default_sprite, "default_sprite");
    auto sf_default_btn_disabled = SpriteFrame::create("creator_assets/image/default_btn_disabled.png", Rect(0, 0, 40, 40), false, Vec2(0, 0), Size(40, 40));
    sf_default_btn_disabled->setCenterRectInPixels(Rect(4,4,32,28));
    spriteFrameCache->addSpriteFrame(sf_default_btn_disabled, "default_btn_disabled");
    auto sf_default_scrollbar_vertical_bg = SpriteFrame::create("creator_assets/image/default_scrollbar_vertical_bg.png", Rect(0, 0, 15, 30), false, Vec2(0, 0), Size(15, 30));
    sf_default_scrollbar_vertical_bg->setCenterRectInPixels(Rect(0,7,15,15));
    spriteFrameCache->addSpriteFrame(sf_default_scrollbar_vertical_bg, "default_scrollbar_vertical_bg");
    auto sf_grossinis_sister1_png = SpriteFrame::create("creator_assets/test_polygon.png", Rect(336, 1, 50, 116), false, Vec2(0, -11), Size(52, 139));
    sf_grossinis_sister1_png->setCenterRectInPixels(Rect(7,6,34,39));
    spriteFrameCache->addSpriteFrame(sf_grossinis_sister1_png, "grossinis_sister1.png");
    auto sf_grossini = SpriteFrame::create("creator_assets/grossini.png", Rect(1, 1, 461, 219), false, Vec2(-24.5, 17.5), Size(512, 256));
    spriteFrameCache->addSpriteFrame(sf_grossini, "grossini");
    auto sf_default_panel = SpriteFrame::create("creator_assets/image/default_panel.png", Rect(0, 0, 20, 20), false, Vec2(0, 0), Size(20, 20));
    sf_default_panel->setCenterRectInPixels(Rect(4,3,12,14));
    spriteFrameCache->addSpriteFrame(sf_default_panel, "default_panel");
    auto sf_default_toggle_checkmark = SpriteFrame::create("creator_assets/image/default_toggle_checkmark.png", Rect(5, 3, 20, 19), false, Vec2(1, 1.5), Size(28, 28));
    spriteFrameCache->addSpriteFrame(sf_default_toggle_checkmark, "default_toggle_checkmark");
    auto sf_default_btn_pressed = SpriteFrame::create("creator_assets/image/default_btn_pressed.png", Rect(0, 0, 40, 40), false, Vec2(0, 0), Size(40, 40));
    sf_default_btn_pressed->setCenterRectInPixels(Rect(3,4,34,32));
    spriteFrameCache->addSpriteFrame(sf_default_btn_pressed, "default_btn_pressed");
    auto sf_iso_test = SpriteFrame::create("creator_assets/iso-test.png", Rect(2, 1, 319, 116), false, Vec2(-94.5, 69), Size(512, 256));
    spriteFrameCache->addSpriteFrame(sf_iso_test, "iso-test");
    auto sf_test_polygon = SpriteFrame::create("creator_assets/test_polygon.png", Rect(4, 2, 380, 152), false, Vec2(0.5, 0.5), Size(387, 157));
    spriteFrameCache->addSpriteFrame(sf_test_polygon, "test_polygon");
    auto sf_default_btn_normal = SpriteFrame::create("creator_assets/image/default_btn_normal.png", Rect(0, 0, 40, 40), false, Vec2(0, 0), Size(40, 40));
    sf_default_btn_normal->setCenterRectInPixels(Rect(3,3,34,30));
    spriteFrameCache->addSpriteFrame(sf_default_btn_normal, "default_btn_normal");
    auto sf_default_toggle_normal = SpriteFrame::create("creator_assets/image/default_toggle_normal.png", Rect(0, 0, 28, 28), false, Vec2(0, 0), Size(28, 28));
    spriteFrameCache->addSpriteFrame(sf_default_toggle_normal, "default_toggle_normal");
    auto sf_grossini_dance_08 = SpriteFrame::create("creator_assets/grossini_dance_08.png", Rect(17, 7, 51, 109), false, Vec2(0, -1), Size(85, 121));
    spriteFrameCache->addSpriteFrame(sf_grossini_dance_08, "grossini_dance_08");
    auto sf_default_progressbar_bg = SpriteFrame::create("creator_assets/image/default_progressbar_bg.png", Rect(0, 0, 60, 15), false, Vec2(0, 0), Size(60, 15));
    sf_default_progressbar_bg->setCenterRectInPixels(Rect(5,0,50,15));
    spriteFrameCache->addSpriteFrame(sf_default_progressbar_bg, "default_progressbar_bg");
    auto sf_island_polygon_png = SpriteFrame::create("creator_assets/test_polygon.png", Rect(1, 1, 287, 152), false, Vec2(16, 7), Size(320, 200));
    spriteFrameCache->addSpriteFrame(sf_island_polygon_png, "island_polygon.png");
    auto sf_default_toggle_disabled = SpriteFrame::create("creator_assets/image/default_toggle_disabled.png", Rect(0, 0, 28, 28), false, Vec2(0, 0), Size(28, 28));
    spriteFrameCache->addSpriteFrame(sf_default_toggle_disabled, "default_toggle_disabled");
    auto sf_default_radio_button_on = SpriteFrame::create("creator_assets/image/default_radio_button_on.png", Rect(0, 0, 32, 32), false, Vec2(0, 0), Size(32, 32));
    spriteFrameCache->addSpriteFrame(sf_default_radio_button_on, "default_radio_button_on");
    auto sf_ui = SpriteFrame::create("creator_assets/ui.png", Rect(2, 2, 124, 221), false, Vec2(0, 15.5), Size(128, 256));
    spriteFrameCache->addSpriteFrame(sf_ui, "ui");
    auto sf_default_toggle_pressed = SpriteFrame::create("creator_assets/image/default_toggle_pressed.png", Rect(0, 0, 28, 28), false, Vec2(0, 0), Size(28, 28));
    spriteFrameCache->addSpriteFrame(sf_default_toggle_pressed, "default_toggle_pressed");
    auto sf_default_radio_button_off = SpriteFrame::create("creator_assets/image/default_radio_button_off.png", Rect(2, 2, 28, 30), false, Vec2(0, -1), Size(32, 32));
    spriteFrameCache->addSpriteFrame(sf_default_radio_button_off, "default_radio_button_off");
    auto sf_default_scrollbar_bg = SpriteFrame::create("creator_assets/image/default_scrollbar_bg.png", Rect(0, 0, 30, 15), false, Vec2(0, 0), Size(30, 15));
    sf_default_scrollbar_bg->setCenterRectInPixels(Rect(10,0,10,15));
    spriteFrameCache->addSpriteFrame(sf_default_scrollbar_bg, "default_scrollbar_bg");
    auto sf_default_progressbar = SpriteFrame::create("creator_assets/image/default_progressbar.png", Rect(0, 0, 30, 15), false, Vec2(0, 0), Size(30, 15));
    sf_default_progressbar->setCenterRectInPixels(Rect(5,0,20,15));
    spriteFrameCache->addSpriteFrame(sf_default_progressbar, "default_progressbar");
    auto sf_default_sprite_splash = SpriteFrame::create("creator_assets/image/default_sprite_splash.png", Rect(0, 0, 2, 2), false, Vec2(0, 0), Size(2, 2));
    spriteFrameCache->addSpriteFrame(sf_default_sprite_splash, "default_sprite_splash");
    auto sf_default_scrollbar_vertical = SpriteFrame::create("creator_assets/image/default_scrollbar_vertical.png", Rect(2, 0, 11, 30), false, Vec2(0, 0), Size(15, 30));
    sf_default_scrollbar_vertical->setCenterRectInPixels(Rect(0,5,11,20));
    spriteFrameCache->addSpriteFrame(sf_default_scrollbar_vertical, "default_scrollbar_vertical");
    auto sf_default_scrollbar = SpriteFrame::create("creator_assets/image/default_scrollbar.png", Rect(0, 2, 30, 11), false, Vec2(0, 0), Size(30, 15));
    sf_default_scrollbar->setCenterRectInPixels(Rect(10,0,10,11));
    spriteFrameCache->addSpriteFrame(sf_default_scrollbar, "default_scrollbar");
    // END SpriteFrame loading

        return true;
    }
    Node* CreatorTest1_create()
{
    // New node
    auto scene_27 = Scene::create();
    scene_27->setAnchorPoint(Vec2(0, 0));
    scene_27->setColor(Color3B(255, 255, 255));
    scene_27->setLocalZOrder(0);
    scene_27->setGlobalZOrder(0);
    scene_27->setOpacity(255);
    scene_27->setOpacityModifyRGB(false);
    scene_27->setCascadeOpacityEnabled(true);
    scene_27->setTag(-1);
    scene_27->setContentSize(Size(0, 0));
    // New node
    auto tmxtiledmap_28 = TMXTiledMap::create("creator_assets/iso-test.tmx");
    tmxtiledmap_28->setAnchorPoint(Vec2(0.5, 0.5));
    tmxtiledmap_28->setScaleY(1);
    tmxtiledmap_28->setScaleX(1);
    tmxtiledmap_28->setColor(Color3B(255, 255, 255));
    tmxtiledmap_28->setName("iso-test");
    tmxtiledmap_28->setLocalZOrder(0);
    tmxtiledmap_28->setGlobalZOrder(0);
    tmxtiledmap_28->setOpacity(255);
    tmxtiledmap_28->setOpacityModifyRGB(false);
    tmxtiledmap_28->setCascadeOpacityEnabled(true);
    tmxtiledmap_28->setSkewX(0);
    tmxtiledmap_28->setTag(-1);
    tmxtiledmap_28->setSkewY(0);
    tmxtiledmap_28->setRotationSkewY(0);
    tmxtiledmap_28->setPosition(Vec2(494, 231));
    tmxtiledmap_28->setRotationSkewX(0);
    scene_27->addChild(tmxtiledmap_28);
    // New node
    auto particlesystemquad_29 = ParticleSystemQuad::create("creator_assets/Galaxy.plist");
    particlesystemquad_29->setAnchorPoint(Vec2(0.5, 0.5));
    particlesystemquad_29->setScaleY(1);
    particlesystemquad_29->setScaleX(1);
    particlesystemquad_29->setColor(Color3B(255, 255, 255));
    particlesystemquad_29->setName("Galaxy");
    particlesystemquad_29->setLocalZOrder(0);
    particlesystemquad_29->setGlobalZOrder(0);
    particlesystemquad_29->setOpacity(255);
    particlesystemquad_29->setOpacityModifyRGB(false);
    particlesystemquad_29->setCascadeOpacityEnabled(true);
    particlesystemquad_29->setSkewX(0);
    particlesystemquad_29->setTag(-1);
    particlesystemquad_29->setContentSize(Size(0, 0));
    particlesystemquad_29->setSkewY(0);
    particlesystemquad_29->setRotationSkewY(0);
    particlesystemquad_29->setPosition(Vec2(115, 251));
    particlesystemquad_29->setRotationSkewX(0);
    scene_27->addChild(particlesystemquad_29);
    // New node
    auto sprite_30 = Sprite::create();
    sprite_30->setSpriteFrame("grossini_dance_08");
    sprite_30->setAnchorPoint(Vec2(0.5, 0.5));
    sprite_30->setScaleY(3);
    sprite_30->setScaleX(2);
    sprite_30->setColor(Color3B(255, 255, 255));
    sprite_30->setName("New Sprite (Splash)");
    sprite_30->setLocalZOrder(0);
    sprite_30->setGlobalZOrder(0);
    sprite_30->setOpacity(255);
    sprite_30->setOpacityModifyRGB(false);
    sprite_30->setCascadeOpacityEnabled(true);
    sprite_30->setSkewX(0);
    sprite_30->setTag(-1);
    sprite_30->setContentSize(Size(85, 121));
    sprite_30->setSkewY(0);
    sprite_30->setRotationSkewY(0);
    sprite_30->setPosition(Vec2(263, 542));
    sprite_30->setRotationSkewX(0);
    sprite_30->setCenterRectNormalized(Rect(0,0,1,1));
    scene_27->addChild(sprite_30);
    // New node
    auto sprite_31 = Sprite::create();
    sprite_31->setSpriteFrame("grossini_dance_08");
    sprite_31->setAnchorPoint(Vec2(0.5, 0.5));
    sprite_31->setScaleY(1);
    sprite_31->setScaleX(1);
    sprite_31->setColor(Color3B(255, 255, 255));
    sprite_31->setName("grossini_dance_08");
    sprite_31->setLocalZOrder(0);
    sprite_31->setGlobalZOrder(0);
    sprite_31->setOpacity(255);
    sprite_31->setOpacityModifyRGB(false);
    sprite_31->setCascadeOpacityEnabled(true);
    sprite_31->setSkewX(0);
    sprite_31->setTag(-1);
    sprite_31->setContentSize(Size(85, 121));
    sprite_31->setSkewY(0);
    sprite_31->setRotationSkewY(0);
    sprite_31->setPosition(Vec2(100, 407));
    sprite_31->setRotationSkewX(0);
    sprite_31->setCenterRectNormalized(Rect(0,0,1,1));
    scene_27->addChild(sprite_31);
    // New node
    auto label_32 = Label::createWithSystemFont("This is a label", "arial", 40);
    label_32->setAnchorPoint(Vec2(0.5, 0.5));
    label_32->setScaleY(1);
    label_32->setScaleX(1);
    label_32->setColor(Color3B(255, 255, 255));
    label_32->setName("Label_1");
    label_32->setVerticalAlignment(TextVAlignment::CENTER);
    label_32->setLocalZOrder(0);
    label_32->setGlobalZOrder(0);
    label_32->setOpacity(255);
    label_32->setOpacityModifyRGB(false);
    label_32->setCascadeOpacityEnabled(true);
    label_32->setHorizontalAlignment(TextHAlignment::CENTER);
    label_32->setSkewX(0);
    label_32->setTag(-1);
    label_32->setContentSize(Size(244.55, 40));
    label_32->setSkewY(0);
    label_32->setRotationSkewY(0);
    label_32->setPosition(Vec2(437, 606));
    label_32->setRotationSkewX(0);
    scene_27->addChild(label_32);
    // New node
    auto label_33 = Label::createWithSystemFont("This is another label", "arial", 40);
    label_33->setAnchorPoint(Vec2(0.5, 0.5));
    label_33->setScaleY(1);
    label_33->setScaleX(1);
    label_33->setColor(Color3B(255, 255, 255));
    label_33->setName("Label_2");
    label_33->setVerticalAlignment(TextVAlignment::CENTER);
    label_33->setLocalZOrder(0);
    label_33->setGlobalZOrder(0);
    label_33->setOpacity(255);
    label_33->setOpacityModifyRGB(false);
    label_33->setCascadeOpacityEnabled(true);
    label_33->setHorizontalAlignment(TextHAlignment::CENTER);
    label_33->setSkewX(0);
    label_33->setTag(-1);
    label_33->setContentSize(Size(357.97, 40));
    label_33->setSkewY(0);
    label_33->setRotationSkewY(0);
    label_33->setPosition(Vec2(107, 289));
    label_33->setRotationSkewX(0);
    scene_27->addChild(label_33);
    return scene_0;
}
////// AUTOGENERATED:END//////
